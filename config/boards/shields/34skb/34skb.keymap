/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  tapping-term-ms = <200>;
  flavor = "tap-preferred";
};

/ { 
    combos {
        compatible = "zmk,combos";
        combo_esc {
          timeout-ms = <50>;
          key-positions = <0 1>;
          bindings = <&kp ESC>;
        };
         combo_tab {
          timeout-ms = <50>;
          key-positions = <10 11>;
          bindings = <&kp TAB>;
        };
        combo_ralt {
          timeout-ms = <50>;
          key-positions = <17 16>;
          bindings = <&kp RALT>;
        };
        combo_lalt {
          timeout-ms = <50>;
          key-positions = <11 12>;
          bindings = <&kp LALT>;
        };
        combo_lgui {
          timeout-ms = <50>;
          key-positions = <12 13>;
          bindings = <&kp LGUI>;
        };
        combo_rgui {
          timeout-ms = <50>;
          key-positions = <17 18>;
          bindings = <&kp RGUI>;
        };
    };

    keymap {
      compatible = "zmk,keymap";
                
      default_layer {
        bindings = <
          &mt ESC Q  &kp W        &kp E         &kp R         &kp T             &kp Y                 &kp U       &kp I                 &kp O           &mt BSPC P 
          &kp A      &kp S        &mt LALT D    &mt LGUI F    &mt TAB G         &kp H                 &mt LGUI J  &mt LALT K            &mt RIGHT L     &mt DQT SQT
          &mt LCTL Z &mt LG(X) X  &mt LG(C) C   &mt LG(V) V   &kp B             &kp N                 &kp M       &mt LS(EQUAL) COMMA   &mt EQUAL DOT   &mt LS(MINUS) MINUS
                                                &kp SPC       &sk LSHFT         &mt LS(LA(LCTL)) RET  &to 1 
        >;
      };

      first_layer {
        bindings = <
          &kp LS(N1)        &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)      &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp SPC    &kp BSPC 
          &kp LGUI          &mt BSLH SLASH   &kp LS(N9)  &kp LS(N0)  &kp TAB         &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &mt SEMI COLON 
          &mt TILDE GRAVE   &kp LBKT    &kp LBRC    &kp RBRC    &kp RBKT        &kp LCTL   &kp PG_DN  &kp PG_UP  &mt PIPE QMARK  &to 3 
                                                    &to 0       &sk LSHFT       &kp LALT   &to 2 
        >;
      };

      second_layer {
        bindings = <
          &kp LG(W)     &kp LG(LEFT) &kp LS(LG(LBRC))  &kp LS(LG(RBRC)) &kp LG(RIGHT)   &kp EQUAL &kp N7 &kp N8 &kp N9 &kp BSPC 
          &kp LGUI      &kp LA(F12)  &kp LS(COMMA)     &kp LS(DOT)      &kp TAB         &mt COMMA DOT   &kp N4 &kp N5 &kp N6 &kp LS(EQUAL)
          &kp LG(GRAVE) &kp LC(F)    &kp SLASH         &kp LS(N8)       &trans          &kp N0    &kp N1 &kp N2 &kp N3 &kp MINUS
                                                       &to 0            &kp LCTL        &kp LALT  &to 1 
        >;
      };
    
      third_layer {
        bindings = <
          &kp ESC  &kp C_PP &kp C_PREV   &kp C_NEXT   &kp LS(MINUS)   &kp F10  &kp F7 &kp F8 &kp F9 &kp BSPC
          &kp LGUI &trans   &kp C_VOL_DN &kp C_VOL_UP &kp TAB         &kp F11  &kp F4 &kp F5 &kp F6 &kp RET 
          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 3 &bt BT_SEL 4 &kp LS(EQUAL)   &kp F12  &kp F1 &kp F2 &kp F3 &to 2  
                                         &to 0        &sk LSHFT       &kp LALT &to 1 
        >;
     };
  };
};
